const data = {
  questions: [
    {
      question: "What is the purpose of the __init__ method in a Python class?",
      options: [
        "To initialize the class itself",
        "To initialize the instance of the class",
        "To define class-level variables",
        "To delete an instance of the class",
      ],
      correctOption: 1,
      points: 10,
    },
    {
      question: "How do you create an instance of a class in Python?",
      options: [
        "class MyClass()",
        "MyClass = new MyClass()",
        "MyClass()",
        "new MyClass()",
      ],
      correctOption: 2,
      points: 10,
    },
    {
      question: "What is the purpose of the self parameter in class methods?",
      options: [
        "To refer to the class itself",
        "To refer to the instance of the class",
        "To refer to the parent class",
        "To refer to the global scope",
      ],
      correctOption: 1,
      points: 10,
    },
    {
      question: "How do you define a class method in Python?",
      options: [
        "Using the @staticmethod decorator",
        "Using the @classmethod decorator",
        "Using the @property decorator",
        "Using the @method decorator",
      ],
      correctOption: 1,
      points: 20,
    },
    {
      question: "What is the purpose of the @staticmethod decorator?",
      options: [
        "To define a method that belongs to the class, not the instance",
        "To define a method that belongs to the instance, not the class",
        "To define a method that can access class-level variables",
        "To define a method that can access instance-level variables",
      ],
      correctOption: 0,
      points: 20,
    },
    {
      question: "How do you inherit from a parent class in Python?",
      options: [
        "class ChildClass inherits ParentClass:",
        "class ChildClass extends ParentClass:",
        "class ChildClass(ParentClass):",
        "class ChildClass.ParentClass:",
      ],
      correctOption: 2,
      points: 10,
    },
    {
      question: "What is the purpose of the super() function?",
      options: [
        "To call a method from the parent class",
        "To call a method from the child class",
        "To call a method from the global scope",
        "To call a method from the same class",
      ],
      correctOption: 0,
      points: 20,
    },
    {
      question: "What is encapsulation in OOP?",
      options: [
        "Hiding the internal state and requiring all interaction to be performed through an object's methods",
        "The ability to create new classes based on existing classes",
        "The ability to define multiple methods with the same name",
        "The ability to define methods that operate on different types",
      ],
      correctOption: 0,
      points: 20,
    },
    {
      question: "What is polymorphism in OOP?",
      options: [
        "The ability to create new classes based on existing classes",
        "The ability to define multiple methods with the same name",
        "The ability to define methods that operate on different types",
        "The ability to hide the internal state of an object",
      ],
      correctOption: 2,
      points: 20,
    },
    {
      question: "What is inheritance in OOP?",
      options: [
        "The ability to create new classes based on existing classes",
        "The ability to define multiple methods with the same name",
        "The ability to define methods that operate on different types",
        "The ability to hide the internal state of an object",
      ],
      correctOption: 0,
      points: 20,
    },
    {
      question: "What is the purpose of the __str__ method in a class?",
      options: [
        "To define a string representation of the class",
        "To define a string representation of the instance",
        "To define a string representation of the class variables",
        "To define a string representation of the class methods",
      ],
      correctOption: 1,
      points: 10,
    },
    {
      question: "How do you define a private attribute in a Python class?",
      options: [
        "By prefixing the attribute name with a single underscore",
        "By prefixing the attribute name with a double underscore",
        "By suffixing the attribute name with a single underscore",
        "By suffixing the attribute name with a double underscore",
      ],
      correctOption: 1,
      points: 20,
    },
    {
      question: "What is the purpose of the @property decorator?",
      options: [
        "To define a method that can be accessed like an attribute",
        "To define a method that belongs to the class, not the instance",
        "To define a method that can access class-level variables",
        "To define a method that can access instance-level variables",
      ],
      correctOption: 0,
      points: 20,
    },
    {
      question: "What is the purpose of the __del__ method in a class?",
      options: [
        "To define a destructor method that is called when an instance is deleted",
        "To define a constructor method that is called when an instance is created",
        "To define a method that is called when an instance is modified",
        "To define a method that is called when an instance is accessed",
      ],
      correctOption: 0,
      points: 20,
    },
    {
      question:
        "How do you check if an object is an instance of a specific class?",
      options: [
        "Using the isinstance() function",
        "Using the issubclass() function",
        "Using the type() function",
        "Using the class() function",
      ],
      correctOption: 0,
      points: 10,
    },
    {
      question: "What is the purpose of the __repr__ method in a class?",
      options: [
        "To define a string representation of the instance for debugging",
        "To define a string representation of the instance for printing",
        "To define a string representation of the class variables",
        "To define a string representation of the class methods",
      ],
      correctOption: 0,
      points: 20,
    },
    {
      question: "How do you define a class attribute in Python?",
      options: [
        "By defining the attribute inside the __init__ method",
        "By defining the attribute outside any methods",
        "By defining the attribute inside a class method",
        "By defining the attribute inside a static method",
      ],
      correctOption: 1,
      points: 10,
    },
    {
      question: "What is the purpose of the __call__ method in a class?",
      options: [
        "To make an instance callable like a function",
        "To define a method that is called when an instance is created",
        "To define a method that is called when an instance is deleted",
        "To define a method that is called when an instance is accessed",
      ],
      correctOption: 0,
      points: 20,
    },
    {
      question: "How do you define a static method in Python?",
      options: [
        "Using the @staticmethod decorator",
        "Using the @classmethod decorator",
        "Using the @property decorator",
        "Using the @method decorator",
      ],
      correctOption: 0,
      points: 10,
    },
    {
      question: "What is the purpose of the __getitem__ method in a class?",
      options: [
        "To define how an instance's items are accessed using square brackets",
        "To define how an instance's attributes are accessed",
        "To define how an instance's methods are accessed",
        "To define how an instance's class variables are accessed",
      ],
      correctOption: 0,
      points: 20,
    },
    {
      question: "How do you define a class method in Python?",
      options: [
        "Using the @staticmethod decorator",
        "Using the @classmethod decorator",
        "Using the @property decorator",
        "Using the @method decorator",
      ],
      correctOption: 1,
      points: 10,
    },
    {
      question: "What is the purpose of the __setitem__ method in a class?",
      options: [
        "To define how an instance's items are set using square brackets",
        "To define how an instance's attributes are set",
        "To define how an instance's methods are set",
        "To define how an instance's class variables are set",
      ],
      correctOption: 0,
      points: 20,
    },
    {
      question: "What is the purpose of the __len__ method in a class?",
      options: [
        "To define the length of an instance",
        "To define the length of a class",
        "To define the length of a method",
        "To define the length of an attribute",
      ],
      correctOption: 0,
      points: 10,
    },
    {
      question: "How do you define a private method in a Python class?",
      options: [
        "By prefixing the method name with a single underscore",
        "By prefixing the method name with a double underscore",
        "By suffixing the method name with a single underscore",
        "By suffixing the method name with a double underscore",
      ],
      correctOption: 1,
      points: 20,
    },
    {
      question: "What is the purpose of the __iter__ method in a class?",
      options: [
        "To define an iterator for the instance",
        "To define an iterator for the class",
        "To define an iterator for a method",
        "To define an iterator for an attribute",
      ],
      correctOption: 0,
      points: 20,
    },
  ],
};
export default data;
